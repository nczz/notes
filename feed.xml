<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>隨手筆記</title>
    <atom:link href="http://log.mxp.tw/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://log.mxp.tw</link>
    <description>知識得之於人，所以也將自己的筆記放上網希望能有點貢獻，這也是種 OpenSource 吧！ ：）</description>
    <pubDate>Tue, 24 Sep 2013 17:29:00 +0800</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>HTML 樣板引擎 - Jade</title>
      <link>http://log.mxp.tw/articles/Learning_Jade_Template_Engine/</link>
      <pubDate>Tue, 24 Sep 2013 17:29:00 +0800</pubDate>
      <guid isPermaLink="true">http://log.mxp.tw/articles/Learning_Jade_Template_Engine/</guid>
      <author></author>
      <description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;第一次接觸這語言是在實做 NodeJS + ExpressJS 碰到的，App 中預設的樣版引擎模組，
當時沒覺得甚麼，一直到開始想改這 Blog 的模板時就再次相遇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;sapn&gt;&lt;/p&gt;
&lt;h4&gt;主題&lt;/h4&gt;
&lt;p&gt;官網： &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade - Node Template Engine&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/visionmedia/jade/&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;對常寫 &lt;code&gt;HTML&lt;/code&gt; 的人應該很好上手，語言的表達很清楚，唯一要注意的大概就是排版吧!&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;Tab&lt;/code&gt; 排或用 &lt;code&gt;Space&lt;/code&gt; 空格排都可以，但要維持一致性，不然就會發生解析錯誤、編譯失敗。&lt;/p&gt;
&lt;p&gt;舉簡單例子：&lt;/p&gt;
&lt;p&gt;一般寫 HTML 標籤都是帶著角括弧成對出現，在 Jade 中只有一半的標籤而且無需角括弧，然後利用縮排的觀念去解釋&lt;/p&gt;
&lt;p&gt;EX&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Hi, This is Mxp.&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;轉成 &lt;code&gt;Jade&lt;/code&gt; 後變成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;html
  head
    title
      Hi, This is Mxp.
    body
      p
        Hello World!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看起來好像沒這麼漂亮，但是實用性大增，程式化之下可以做的事就更簡單！&lt;/p&gt;
&lt;p&gt;像這個 Blog 每一頁面都是靜態的 html 檔，由 Jade 樣板產生的話只需要幾個檔案搭配一些繼承關系就解決，&lt;/p&gt;
&lt;p&gt;有規劃的話，對於開發效率應該提升不少。&lt;/p&gt;
&lt;p&gt;以下列出幾個網路上學習的資源，看過玩過就有收穫了！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnjade.com/tour/intro/&quot; title=&quot;建議初學者從這開始，一步一步學，邊學邊改&quot;&gt;Learnjade.com&lt;/a&gt; — 建議初學者從這開始，一步一步學，邊學邊改&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnjade.com/playground/&quot; title=&quot;與上一個網站相同，但要特別推薦這個是因為可以在這邊模擬繼承關係&quot;&gt;Playground&lt;/a&gt; — 與上一個網站相同，但要特別推薦這個是因為可以在這邊模擬繼承關係&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://naltatis.github.io/jade-syntax-docs/#basics&quot; title=&quot;與第一個性質學習差不多，但有多提到了函式的操作與一些基礎概念&quot;&gt;Jade-syntax-docs&lt;/a&gt; — 與第一個性質學習差不多，但有多提到了函式的操作與一些基礎概念&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>高等演算法-第三週作業</title>
      <link>http://log.mxp.tw/articles/Advanced_Algorithm_Home_Work/</link>
      <pubDate>Mon, 23 Sep 2013 17:29:00 +0800</pubDate>
      <guid isPermaLink="true">http://log.mxp.tw/articles/Advanced_Algorithm_Home_Work/</guid>
      <author></author>
      <description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;從演算法到高等演算法，再次學習的感受又不一樣了！ 
&lt;del&gt;難怪有好課值得一修再修的道理XD&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;sapn&gt;&lt;/p&gt;
&lt;h4&gt;主題&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作業一： 找一個「&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95&quot; title=&quot;Wiki: 原地演算法（in-place algorithm）是一種使用小的，固定數量的額外之空間來轉換資料的演算法。當演算法執行時，輸入的資料通常會被要輸出的部份覆蓋掉。不是原地演算法有時候稱為非原地（not-in-place）或不得其所（out-of-place）。&quot;&gt;In place&lt;/a&gt;」的演算法問題？&lt;/p&gt;
&lt;p&gt; 答： 數值比 大 / 小，程式碼如下 (JavaScript)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;];
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; min = arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
 &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;arr.length; ++i) {
     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;lt; min) {
         min = arr[i];
     }
 }
 console.log(&lt;span class=&quot;string&quot;&gt;&quot;The minimum in arr is: &quot;&lt;/span&gt;+min);&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作業二： 證明「&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F&quot; title=&quot;Wiki: 選擇排序(Selection sort)是一種簡單直觀的排序演算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然後，再從剩餘未排序元素中繼續尋找最小（大）元素，然後放到已排序序列的末尾。以此類推，直到所有元素均排序完畢。&quot;&gt;選擇&lt;/a&gt;、&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&quot; title=&quot;Wiki: 冒泡排序（Bubble Sort，台灣譯為：泡沫排序或氣泡排序）是一種簡單的排序演算法。它重複地走訪過要排序的數列，一次比較兩個元素，如果他們的順序錯誤就把他們交換過來。走訪數列的工作是重複地進行直到沒有再需要交換，也就是說該數列已經排序完成。這個演算法的名字由來是因為越小的元素會經由交換慢慢「浮」到數列的頂端。&quot;&gt;泡沫&lt;/a&gt;、&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&quot; title=&quot;Wiki: 插入排序（Insertion Sort）的演算法描述是一種簡單直觀的排序演算法。它的工作原理是通過構建有序序列，對於未排序數據，在已排序序列中從後向前掃描，找到相應位置並插入。插入排序在實現上，通常採用in-place排序（即只需用到O(1)的額外空間的排序），因而在從後向前掃描過程中，需要反覆把已排序元素逐步向後挪位，為最新元素提供插入空間。&quot;&gt;插入&lt;/a&gt;排序法是否屬於 &lt;a href=&quot;http://www.csie.ntnu.edu.tw/~u91029/SequenceManipulation.html&quot; title=&quot;演算法筆記&amp;gt; 延伸閱讀： stable 兩筆相同資料，原本排在前頭的，排序後仍在前頭；原本排在後頭的，排序後仍在後頭。這稱做 stable 的排序演算法，相同資料、順序不變。&quot;&gt;Stable / Non-Stable&lt;/a&gt;」？&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A8.B3.E5.AE.9A.E6.80.A7&quot; title=&quot;Wiki: 排序算法:穩定度&quot;&gt;答&lt;/a&gt;：維基說原始的選擇排序法為 &lt;code&gt;Non-Stable&lt;/code&gt; 的排序法！但結果其實取決於程式的寫法，在判別大小時如果多一個 &lt;code&gt;=&lt;/code&gt; 號就會是不穩定的排序了。&lt;/p&gt;
&lt;p&gt; 選擇排序法： 在陣列中找到最小的後放在最左邊設定其為排好的數列，再從下一個開始到結尾找最小的排，直到結束。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = genRandNumArr(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//產生陣列&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; work_index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//設定起始位址&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; min = {index:work_index,value:arr[work_index].value}; &lt;span class=&quot;comment&quot;&gt;//設定最小值，即為起始位址&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;arr.length; ++j) {
     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=work_index; i&amp;lt;arr.length; ++i) {
         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i].value &amp;lt; min.value) { &lt;span class=&quot;comment&quot;&gt;//non-stable switch&lt;/span&gt;
             min.value = arr[i].value; &lt;span class=&quot;comment&quot;&gt;//紀錄最小值&lt;/span&gt;
             min.index = i; &lt;span class=&quot;comment&quot;&gt;//紀錄最小值位址&lt;/span&gt;
         }
     }
     arr.swap(work_index,min.index); &lt;span class=&quot;comment&quot;&gt;//將最小的元素換到最左後從下一個繼續比&lt;/span&gt;
     work_index = j;
     min.index = work_index;
     min.value = arr[work_index].value;
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 泡沫排序法： 在陣列中兩兩比較，找最大的數一路交換到最右邊，重複比較步驟直到換到最左。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r=arr.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; r&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; --r) {
     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;r; ++i) {
         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i].value &amp;gt; arr[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].value) { &lt;span class=&quot;comment&quot;&gt;//non-stable switch&lt;/span&gt;
             arr.swap(i,i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
         }
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 插入排序法： 設定從第二個元素開始到結束，比較迴圈過程中指定的元素前面所有元素大小，交換比指定元素大的元素，直到迴圈結束。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;arr.length ;j++ ) {
     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t=j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; t&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; --t) {
         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[t].value &amp;gt; arr[t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].value) { &lt;span class=&quot;comment&quot;&gt;//non-stable switch&lt;/span&gt;
             arr.swap(t,t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
         }
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 文章只有部分程式，其他的在這: &lt;a href=&quot;http://log.mxp.tw/articles/Advanced_Algorithm_Home_Work/Week03.js&quot; title=&quot;右鍵另存檔案！&quot;&gt;Week03.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;結語&lt;/h4&gt;
&lt;p&gt;因為想知道是否為 &lt;code&gt;Stable&lt;/code&gt; 所以多包了一層來比較有序號的物件才能夠清楚結果！ 
但也產生了一個有趣的現象：「是不是 Stable ，寫程式的人都能掌握」。&lt;/p&gt;
&lt;p&gt;有任何錯誤歡迎利用下方留言告知，以免犯了科學大忌誤人子弟！&lt;/p&gt;
</description>
    </item>
    <item>
      <title>專案-台鐵訂票小幫手</title>
      <link>http://log.mxp.tw/articles/TRA_Ticket_Helper/</link>
      <pubDate>Sun, 22 Sep 2013 17:29:00 +0800</pubDate>
      <guid isPermaLink="true">http://log.mxp.tw/articles/TRA_Ticket_Helper/</guid>
      <author></author>
      <description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;主題是團隊合作的開始，期望值的環境是：「幾人小組」、「協同開發」、「版本控制」、「分工合作」，
台鐵這個主題是研究室同學想的，只因為他常常半夜再幫他或是他女友搶火車票，很賭爛XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;sapn&gt;&lt;/p&gt;
&lt;h4&gt;主題&lt;/h4&gt;
&lt;p&gt;前些日子還沒這麼忙的時候，有個想法是「找人合夥做點事」，想當然爾，看到他這麼熱血的想解決這個問題我也跟著起來規劃。&lt;/p&gt;
&lt;p&gt;心想可以藉此機會把大夥給 team 起來，於是著手研究「問題」，如下所列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因為訂票流程不夠直覺，所以卡！ 需要設計快速訂票的流程&lt;/li&gt;
&lt;li&gt;自動訂票，但卡在&lt;a href=&quot;http://railway.hinet.net/Public/main_1_16.html&quot; title=&quot;台鐵網站針對自動訂票的說明&quot;&gt;法規&lt;/a&gt;與驗證(&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%AA%8C%E8%AF%81%E7%A0%81&quot; title=&quot;Wiki: 全自動區分電腦和人類的圖靈測試（英語：Completely Automated Public Turing test to tell Computers and Humans Apart，簡稱CAPTCHA），俗稱驗證碼，是一種區分使用者是電腦和人的公共全自動程式。&quot;&gt;CAPTCHA&lt;/a&gt;) &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;補 最近新聞： &lt;a href=&quot;http://www.ettoday.net/news/20130913/269733.htm&quot; title=&quot;「地下局長」外掛秒殺台鐵票 2個月搶50萬張年獲百萬&quot;&gt;Link1&lt;/a&gt; 、 &lt;a href=&quot;http://www.appledaily.com.tw/appledaily/article/headline/20130919/35305060/&quot; title=&quot;火車票神 幫學弟妹搶票495張&quot;&gt;Link2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一個問題，訂票流程改善方式就是寫程式去爬台鐵網站的&lt;a href=&quot;http://163.29.3.98/xml/&quot; title=&quot;鐵路時刻表(XML格式)&quot;&gt;資料&lt;/a&gt;再將整個訂票頁面設計過就好！
不過第二個問題就要影像處理(&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%85%89%E5%AD%A6%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB&quot; title=&quot;Wiki: Optical Character Recognition, 是指對文字資料的影像檔案進行分析處理，獲取文字及版面訊息的過程。&quot;&gt;OCR&lt;/a&gt;)的技術來解決，但因為有些敏感，就不細談。還好實驗室的
同學包括我自己都是影像處理的領域，這部份還玩的下去XD&lt;/p&gt;
&lt;p&gt;專案開在 &lt;a href=&quot;https://github.com/nczz/TRATicketHelper&quot; title=&quot;台鐵訂票小幫手&quot;&gt;Github&lt;/a&gt; 上，是第一版(硬幹)的重構改寫，因開學後事情不少，慢慢改… OCR目前測辨識成功率有9成，但那部份就不會放出來了。&lt;/p&gt;
&lt;p&gt;使用的工具是 NodeJS + &lt;a href=&quot;http://express-io.org/&quot; title=&quot;ExpressJS + Socket.IO&quot;&gt;ExpressJS.IO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這邊有幾點筆記：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要爬台鐵網站進行訂票一定要取得 session cookie，直接爬訂票頁面會發生錯誤&lt;/li&gt;
&lt;li&gt;爬時刻表網站需要 zLib 解壓縮&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;結語&lt;/h4&gt;
&lt;p&gt;其實做甚麼軟體，對會寫程式的人只需要一個東西叫做「時間」，想法再多也需要實現才能證明，
技術精進與否已經不是我的考量了，同一種技術抓到要領後就沒有必要過份的追尋，為了技術而技術不會幫助你成長，
學習到某種程度後會發現，要切入技術不用花太多時間，花最多的時間在找尋一個叫做「適合」，
那需要經驗的，所以只有讓自己多接觸挑戰多面對各種難題才會進步。&lt;/p&gt;
&lt;p&gt;做研究時，老闆特別叮嚀不要搞系統，是條不歸路。我想在那時候，關於「資訊工程」就有個新的開始了！&lt;/p&gt;
&lt;p&gt;OS: 有些實驗性的程式，結果達到後要我重構再放出真的好懶阿 囧n 慢慢的培養這個良好習慣吧。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>使用 Wintersmith 建置 Github Blog</title>
      <link>http://log.mxp.tw/articles/Build_Github_Blog/</link>
      <pubDate>Sat, 21 Sep 2013 15:21:00 +0800</pubDate>
      <guid isPermaLink="true">http://log.mxp.tw/articles/Build_Github_Blog/</guid>
      <author></author>
      <description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;不是每個人都喜歡這麼喜歡「自訂」，甚麼都要自己來。但有一點是我特別在意的就是「資料」與「環境」。
Blog 環境分成 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己架設&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%83%A8%E8%90%BD%E6%A0%BC%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E5%95%86&quot; title=&quot;Wiki: 部落格服務提供商 (英文：Blog Service Provider，縮寫BSP)的作用是為申請者提供寫blog的空間與相應的技術支援，大大簡化blog的建立過程，推動大眾化發展。部落格服務提供商分為「收費部落格託管商」、「免費部落格託管商」及二者兼營的部落格託管商。&quot;&gt;BSP&lt;/a&gt; 服務&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;sapn&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兩個選項都試過，但是一直卡在資料放別人那甚麼時後掛不知道阿(抖)
自己架設又多一個煩惱 「主機可能隨時會掛，資料又會爆炸阿」，這麼煩就產生一個念頭，簡單、資料在本地、雲端備份，又可以線上發佈，找來找去就屬 &lt;code&gt;Github&lt;/code&gt; 合適！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Github 只能存放靜態 html 檔，所以需要工具產生靜態檔來呈現&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;準備&lt;/h4&gt;
&lt;p&gt;需要背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot; title=&quot;用 JavaScript 打造一個世界吧！&quot;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot; title=&quot;版本控制的好工具阿&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot; title=&quot;這篇 Blog 架設的主站，也是技術得社群網站&quot;&gt;Github&lt;/a&gt; &amp;amp; pages 的操作 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/&quot; title=&quot;雲端硬碟，選項，讓 Blog 可攜&quot;&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://markdown.tw/&quot; title=&quot;寫 Blog 的文字編輯語法&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot; title=&quot;本篇主角&quot;&gt;Wintersmith&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;開始&lt;/h4&gt;
&lt;p&gt;Step1. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先安裝 Wintersmith 背景執行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step2. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Dropbox 下建立一個要放 Blog 的目錄 &lt;code&gt;notes&lt;/code&gt; (舉例)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step3.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;到 Github &lt;a href=&quot;https://github.com/new&quot; title=&quot;點我&quot;&gt;建立&lt;/a&gt;一個 &lt;code&gt;repository&lt;/code&gt; notes (舉例)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建立 repo 分支，有自動跟手動的方法！ 這邊只介紹手動。到 notes 目錄下輸入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/nczz/notes.git

git checkout --orphan gh-pages&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;新增一個 source 目錄放置編譯前的 Blog 原始檔，再新增一個 .gitignore 檔案過慮這個目錄不要上傳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;檔案內容:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step5. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 wintersmith 在 source 這個目錄新增一個 Blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;wintersmith new path/to/notes/source&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有提示錯誤的話就給他加上個 &lt;code&gt;--force&lt;/code&gt; 強制寫入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再來就是到那個目錄下開始東改西改拉，改成自己想要的版型跟想紀錄的文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;預覽的指令是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd path/to/notes/source

wintersmith preview&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;邊改可以邊開瀏覽器 輸入: &lt;code&gt;http://localhost:8080/&lt;/code&gt; 觀察，改好後想發佈就是輸入下面指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;wintersmith build&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;在 source 目錄下會看到一個 &lt;code&gt;build&lt;/code&gt; 目錄，將資料夾內的所有檔案剪下到 &lt;code&gt;notes&lt;/code&gt; 目錄下後輸入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git add .

git commit -a -m &amp;quot;My first github blog&amp;quot;

git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step6.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;到這邊就差不多了，還有一點就是「可攜 (portable)」這件事！ 其實也滿簡單的，就是在 source 目錄下輸入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;把 wintersmith 裝到這個目錄下後只需要再加兩個 batch file / shell script 來控制就好，分別是「preview」跟「build」&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preview&lt;/code&gt; 指令是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;node node_modules/wintersmith/bin/wintersmith preview&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 指令是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;rm -r build (Linux) 或 rmdir build /s /q (Windows) #刪除 build 這資料夾重新產生
node node_modules/wintersmith/bin/wintersmith build&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;結語&lt;/h4&gt;
&lt;p&gt;這篇筆記寫的很通用，適合有點基礎技術操作的人。在 Windows 與 Linux 下都通用。&lt;/p&gt;
&lt;p&gt;對我來說，扣除這些基礎建設後的操作模式就只剩下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;點開 &lt;em&gt;preview&lt;/em&gt; 的執行檔&lt;/li&gt;
&lt;li&gt;去 source/contents/articles 目錄下新增一篇文章&lt;/li&gt;
&lt;li&gt;打開瀏覽器預覽結果，編輯完成後再執行 &lt;em&gt;build&lt;/em&gt; 指令&lt;/li&gt;
&lt;li&gt;剪下 build 目錄下的檔案，蓋到 notes 目錄下， commit &amp;amp; push &lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所有文章都會跟著 Dropbox 跑，換台電腦也是一樣！&lt;/p&gt;
&lt;h4&gt;參考&lt;/h4&gt;
&lt;p&gt;網路上還有一些教學、工具，但要一個自己順手的不容易，所以直接點連結去參考吧！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot; title=&quot;官方推薦&quot;&gt;jekyll&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://octopress.org/&quot; title=&quot;滿多人用這個&quot;&gt;Octopress&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://zespia.tw/hexo/&quot; title=&quot;台灣人寫的喔！&quot;&gt;hexo&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; 更新：2013.09.24 這裡有份網友更新的清單&lt;/p&gt;
 &lt;script src=&quot;https://gist.github.com/nodiscc/6138507.js&quot;&gt;&lt;/script&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.kejyun.com/2013/06/Build-Web-Page-On-Github.html&quot; title=&quot;網友細心整理的分享&quot;&gt;在 Github 建立靜態網站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>Hello World!</title>
      <link>http://log.mxp.tw/articles/Hello_World/</link>
      <pubDate>Fri, 20 Sep 2013 23:16:00 +0800</pubDate>
      <guid isPermaLink="true">http://log.mxp.tw/articles/Hello_World/</guid>
      <author></author>
      <description>&lt;p&gt;中秋連假稍微有點閒就來把一些未完成的項目解決，其中一個就是「&lt;a href=&quot;https://github.com/&quot; title=&quot;Geek的社群網站&quot;&gt;Github&lt;/a&gt; blog」，
找了一些 &lt;code&gt;framework&lt;/code&gt; 用來產生靜態站似乎又太肥，最後看到這套 &lt;a href=&quot;http://wintersmith.io/&quot;&gt;&lt;strong&gt;wintersmith&lt;/strong&gt;&lt;/a&gt;，
純粹用 &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt; 來產生網站，配合線上看結果再輸出，還不錯!&lt;br&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;現在需要想一下怎麼讓這整套可以跟著我的 &lt;a href=&quot;https://www.dropbox.com/&quot;&gt;dropbox&lt;/a&gt; 走！  &lt;/p&gt;
&lt;p&gt;這裡面大概只有 &lt;a href=&quot;http://zh.wikipedia.org/zh-tw/Markdown&quot; title=&quot;Wiki: Markdown 是一種輕量級標記語言，創始人為約翰·格魯伯（John Gruber）和亞倫·斯沃茨（Aaron Swartz）。它允許人們「使用易讀易寫的純文本格式編寫文檔，然後轉換成有效的XHTML(或者HTML)文檔」。這種語言吸收了很多在電子郵件中已有的純文本標記的特性。&quot;&gt;Markdown&lt;/a&gt; 語法要來好好熟悉一下了。 文章的後半部都拿來當一些 MD 語法的筆記吧XD&lt;/p&gt;
&lt;p&gt;用 &lt;a href=&quot;http://notepad-plus-plus.org/&quot; title=&quot;免費輕量級又強大的文字編輯器！&quot;&gt;Notepad++&lt;/a&gt; 編輯的畫面
&lt;img src=&quot;http://log.mxp.tw/articles/Hello_World/notepad.png&quot; alt=&quot;寫文章就像打筆記，沒有一堆tag&quot; title=&quot;寫文章就像打筆記，沒有一堆tag&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Markdown 動手學&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;more&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; //筆記這 Blog 文章 &amp;quot;繼續閱讀&amp;quot; 的 tag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[Markdown][5] //論文式的連結引用法，這寫法很乾淨!

[5]: http://zh.wikipedia.org/zh-tw/Markdown &amp;quot;Wiki:....&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;![這裡是圖沒跑出來會顯示的文字][7] //就是連結語法前加個驚嘆號

[7]: ./notepad.png &amp;quot;這裡是圖顯示出來後的註解文字&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
  </channel>
</rss>